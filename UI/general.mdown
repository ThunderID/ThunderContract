#UI

Contract ini digunakan sebagai format data yang telah disepakati untuk formt paramter yang akan digunakan untuk pembuatan element. 

## Contract

### 1. Parameter yang dikirimkan kedalam element untuk keperluan tampilan UI dikirim menggunakan array dengan nama variabel 'style'

#### Contoh kasus:

a. Penggunaan 1 parameter (misal: class) untuk modifikasi tampilan UI element tertentu, 

	$style['class'] => 'form-input'

b. pengguna beberapa parameter (misal: class dan style) untuk modifikasi tampilan UI element tertentu

	$style => [
		'class' => 'form-input',
		'style' => 'color:red;',
	]

#### Parameter Wajib

a. class : slot untuk class css atau bahkan binding js

b. visible : slot untuk tidak menampilkan element

#### Policy

a. bebas untuk memberikan parameter-parameter sesuai dengan yang dibutuhkan oleh lement tersebut.

b. setiap element haru memiliki dokumentasi dari kegunaan variabel, format parameter, serta cara penggunaan.

c. setiap variabel harus memiliki nilai default bila tidak ada expected data yang dikirimkan.

d. harus dilakukan pengecekan apa variabel ada (error handling bila data yang di-inginkan tidak tersedia). Dapat digunakan metode isset() untuk cek.

e. nilai parameter null berarti mengembalikan nilai default dari parameter tersebut.

f. semua parameter yang dikirim dari luar component, divalidasi terlebih dahulu (poin d & e) lalu kemudian dimasukkan kedalam parameter dengan prefix 'ui_' Misal : 'ui_class'

g. untuk keperluan penampilan kostumasi UI seluruhnya menggunakan variabel dengan prefix 'ui_'

h. untuk element wajib menyertakan nama id unik per element (untuk keperluan single element binding)

j. untuk element wajib menyertakan nama class unik per element (untuk keperluan multiple element binding)

#### Contoh:

	//php
	// ui_class : menyimpan class untuk kostumasi element. Diambil dari parameter $style['class']
	$ui_class 		= isset($style['class']) ? $style['class'] : '';

	//html
	<input id="{{ 'thunder_input_string_' . $dt_name .'_'. $dt_index }}"  class="form-control thunder_input {{ $ui_class }}

Keterangan:

a. class 'thunder_input' merupakan contoh multiple element binding

b. pada property id, merupakan contoh single element binding

### 2. Parameter yang dikirimkan kedalam element untuk distribusi data dikirim menggunakan array dengan parameter 'header' dan 'data' didalamnya

#### Policy

a. hanya data dengan nama field yang ada di array header saja yang boleh ditampilkan 
b. component harus mampu melakukan penyesuaian berdasarkan data kiriman. Bila ada penambahan data, maka seharusnya component akan secara langsung melakukan update.
c. bila component berkaitan dengan Backend, harus ada dokumentasi serta Contract format data yang disepakati oleh UI & Backend
d. semua data yang dikirimkan harus terlebih dahulu di cek (error/null handling)
e. bila ada requirement data yang tidak terpenuhi, component harus menampilkan pesan error.
f. semua data yang sudah di cek dimasukkan dalam variabel dengan prefix '$dt_'
	
#### Contoh:

		//php
		// dt_nama : menyimpan data nama. Diambil dari parameter $data['nama']
		$dt_name = isset($dt_nama) ? $dt_nama : '';

		//html
		<input value="$dt_nama" id="{{ 'thunder_input_string_' . $dt_name .'_'. $dt_index }}"  class="form-control thunder_input {{ $ui_class }}
			
