#Component

Contract ini digunakan sebagai format data dalam component.

## Contract

#### Struktur Data
      |_ component_data
      |   |_ header
      |   |_ data
      |_ component_style
      |_ component_debug

Keterangan :

1. Parameter yang dikirimkan kedalam component dikirim menggunakan array dengan parameter 'component_data' dan 'component_style' didalamnya
2. data dalam variabel 'component_data' digunakan untuk menampung nilai data yang digunakan component
3. data dalam variabel 'component_style' digunakan untuk menampung nilai data yang digunakan untuk keperluan UI
4. data paramter harus dicek terlebih dahulu (null/not setted data), dan tampilkan pesan error jika data yang ditampilkan kurang.
5. punya nilai default untuk variabel-varaibel yang berhubungan dengan UI
6. gunakan global component variabel 'component_errors' untuk menampung pesan error jika terjadi kesalahan pemberian data/ketidaksesuaian format data.
7. jika ada nilai error yang tertamppung pada variabel 'component_errors' tidak menampilkan UI, melainkan pesan error.
8. set 'component_debug'ke true untuk testing dan developing phase. mode ini akan melakukan validasi parameter dan menampilkan pesan error. Bila sudah dalam statu stable, matikan fitur ini untuk mematikan fitur pengecekan 

#### Contoh Kiriman Data:
	[
		'component_data' => [
			'header' => [array data header]
			'data' => [array kiriman data ke element (berdasarkan dokumentasi component)]
		],
		'component_style' => [array parameter UI (berdasarkan dokumentasi component)],
		'component_debug' => true or false
	]

## Policy

a. hanya data dengan nama field yang ada di array header saja yang boleh ditampilkan 

b. component harus mampu melakukan penyesuaian berdasarkan data kiriman(header&data). Bila ada penambahan data, maka seharusnya component akan secara langsung melakukan update.

c. pada 'component_style' isi dan format bergantung pada requirement component dan dapat dilihat pada dokumentasi component.

d. penamaan component menggunakan snake case text format

#### Directory

Untuk pembuatan component, gunakan format strukter folder sebagai berikut.

    component
      |_ Folder Component
      	  |_ Component.blade.php (wajib menggunakan nama ini)
          |_ Module (jika dibutuhkan)
      
Contoh :

    component
      |_ input
		|_ module
		|	|_ input_string.blade.php
		|_ component.blade.php

## Penggunaan

Format :

       @include('components.NAMA FOLDER COMPONENT.component', [
                    'component_data' => [
                        'header' => [],
                        'data' => []
                     ],
                    'component_style'=>[],
		    'component_debug'=>true or false
                ])

Contoh :

       @include('components.input.component', [
                    'component_data' => [
                        'header' => [],
                        'data' => []
                     ],
                    'component_style'=>[],
		    'component_debug'=>true
                ])

## Daftar Component
lihat dokumentasi [Thunder Component](https://github.com/ThunderID/ThunderComponents/blob/master/README.md)
